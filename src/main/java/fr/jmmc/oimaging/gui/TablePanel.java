/** *****************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ***************************************************************************** */
package fr.jmmc.oimaging.gui;

import fr.jmmc.jmcs.gui.component.BasicTableSorter;
import fr.jmmc.jmcs.gui.util.SwingUtils;
import fr.jmmc.oimaging.model.ResultSetTableModel;
import fr.jmmc.oimaging.model.RatingCell;
import fr.jmmc.oimaging.services.ServiceResult;
import java.awt.Dimension;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author martin
 */
public class TablePanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1L;

    private static final Logger logger = LoggerFactory.getLogger(TablePanel.class);
    
    /**
     * ResultSet table model
     */
    private final ResultSetTableModel resultSetTableModel;
    private final BasicTableSorter resultSetTableSorter;
    
    /** object with rendering and editing responsabilities for column RATING.
     * Careful ! You must have one RatingCell for each RATING column.
     */
    private final RatingCell ratingCell;
    private final SuccessCell successCell;

    /**
     * Creates new form TablePanel
     */
    public TablePanel() {

        // Build ResultsTable
        resultSetTableModel = new ResultSetTableModel();
        
        ratingCell = new RatingCell();
        successCell = new SuccessCell();

        initComponents();

        // must come after initComponents()
        resultSetTableSorter = new BasicTableSorter(resultSetTableModel, jResultSetTable.getTableHeader());

        jResultSetTable.setModel(resultSetTableSorter);
        SwingUtils.adjustRowHeight(jResultSetTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jResultSetTable = new javax.swing.JTable();
        jPanelTableOptions = new javax.swing.JPanel();
        jButtonShowTableEditor = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jResultSetTable.setModel(resultSetTableModel);
        jScrollPane1.setViewportView(jResultSetTable);

        jSplitPane1.setRightComponent(jScrollPane1);

        jPanelTableOptions.setLayout(new javax.swing.BoxLayout(jPanelTableOptions, javax.swing.BoxLayout.PAGE_AXIS));

        jButtonShowTableEditor.setText("Table editor");
        jButtonShowTableEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowTableEditorActionPerformed(evt);
            }
        });
        jPanelTableOptions.add(jButtonShowTableEditor);

        jSplitPane1.setLeftComponent(jPanelTableOptions);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Display the table keywords editor and set the new headers
     */
    private void jButtonShowTableEditorActionPerformed(java.awt.event.ActionEvent evt) {
        // Set the dialog box
        JOptionPane jOptionPane = new JOptionPane();
        JDialog dialog = jOptionPane.createDialog("Edit table headers");
        TableEditorPanel tableEditorPanel = new TableEditorPanel(dialog, new ArrayList<>(getTableModel().getUnionColumnDesc()), getTableModel().getUserUnionColumnDesc());
        dialog.setContentPane(tableEditorPanel);
        dialog.setMinimumSize(new Dimension(600, 500));
        dialog.setResizable(true);
        dialog.setVisible(true);
        
        // when dialog returns we set the chosen columns by user
        setUserUnionColumnDesc(tableEditorPanel.getKeywordsToDisplay());
    }                                                      

    /** find the columns to apply pretty renderers. 
     * should  be called each time the columns change
     * it is called in setResults() and setUserUnionColumnDesc().
     */
    public void reTargetRenderers () {
        // We must re-ask for rendering since the TableColumn object is different
        try {
            final TableColumn columnRating = jResultSetTable.getColumn(ResultSetTableModel.HardCodedColumn.RATING.toString());
            columnRating.setCellRenderer(ratingCell);
            columnRating.setCellEditor(ratingCell);
        } catch (IllegalArgumentException e) {}
        
        try {
            final TableColumn columnSuccess = jResultSetTable.getColumn(ResultSetTableModel.HardCodedColumn.SUCCESS.toString());
            columnSuccess.setCellRenderer(successCell);
        } catch (IllegalArgumentException e) {}
    }
    
    public void setResults(List<ServiceResult> results) {
        getTableModel().setResults(results);
        reTargetRenderers();
    }
    
    /** modify the user selected columns in ResulTSetTableModel
     * Used for example when Table Editor dialog returns and we must apply the user choices.
     * @param userUnionColumnDesc 
     */
    public void setUserUnionColumnDesc(List<ResultSetTableModel.ColumnDesc> userUnionColumnDesc) {
        getTableModel().setUserUnionColumnDesc(userUnionColumnDesc);
        reTargetRenderers();
   }

    public ListSelectionModel getSelectionModel() {
        return getTable().getSelectionModel();
    }

    public int getSelectedRowsCount() {
        return getTable().getSelectedRowCount();
    }

    public List<ServiceResult> getSelectedRows() {
        List<ServiceResult> results = new ArrayList<>();

        for (int index : getTable().getSelectedRows()) {
            results.add(resultSetTableModel.getServiceResult(resultSetTableSorter.modelIndex(index)));
        }
        return results;
    }

    public ServiceResult getSelectedRow() {
        final List<ServiceResult> results = getSelectedRows();
        return (results.isEmpty()) ? null : results.get(0);
    }

    public void setSelectedRow(final int rowIndex) {
        final int index = resultSetTableSorter.viewIndex(rowIndex);
        getTable().setRowSelectionInterval(index, index);
    }

    private JTable getTable() {
        return this.jResultSetTable;
    }

    private ResultSetTableModel getTableModel() {
        return this.resultSetTableModel;
    }

    public void addControlComponent(JComponent component) {
        jPanelTableOptions.add(component);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonShowTableEditor;
    private javax.swing.JPanel jPanelTableOptions;
    private javax.swing.JTable jResultSetTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

}

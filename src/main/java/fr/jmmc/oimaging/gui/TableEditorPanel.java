/** *****************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ***************************************************************************** */
package fr.jmmc.oimaging.gui;

import fr.jmmc.oimaging.model.ResultSetTableModel;

import javax.swing.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.List;

/**
 * Panel to be added in a dialog box to edit the display of the table
 * TODO FIX: The headers are cleared if the user presses the close button
 *
 * @author martin
 */
public class TableEditorPanel extends javax.swing.JPanel {

    // Model and view for the list
    private final DefaultListModel<ResultSetTableModel.ColumnDesc> modelAvailable = new DefaultListModel<>();
    private final DefaultListModel<ResultSetTableModel.ColumnDesc> modelDisplayed = new DefaultListModel<>();

    // Reference to the parent dialog box to handle its events
    private final JDialog dialog;
    
    /** true if the user clicked on OK, false if he clicked on cancel / closed the dialog */
    private boolean processOK;

    // Constructor used when an edition has already been done
    /**
     * 
     * @param dialog Reference to the parent dialog box to handle its events
     * @param availableKeywords Available keywords (currently displayed or not) 
     * @param keywordsDisplayed Currently displayed keywords
     */
    public TableEditorPanel(JDialog dialog, List<ResultSetTableModel.ColumnDesc> availableKeywords, List<ResultSetTableModel.ColumnDesc> keywordsDisplayed) {
        initComponents();

        this.dialog = dialog;
        this.processOK = false;
        
        // Fill with available keywords, but remove the ones already displayed
        availableKeywords.forEach(modelAvailable::addElement);
        keywordsDisplayed.forEach(modelAvailable::removeElement);
        
        keywordsDisplayed.forEach(modelDisplayed::addElement);

        jListAvailable.setModel(modelAvailable);
        jListDisplayed.setModel(modelDisplayed);
        
        updateAvailableDisplayedLabels();
    }

    private void updateAvailableDisplayedLabels () {
        jLabelAvailableNb.setText(modelAvailable.getSize() + " available");
        jLabelDisplayedNb.setText(modelDisplayed.getSize() + " selected");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButtonAdd = new javax.swing.JButton();
        jLabelDisplayed = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jLabelAvailable = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jLabelAvailableNb = new javax.swing.JLabel();
        jLabelDisplayedNb = new javax.swing.JLabel();
        jScrollPaneAvailable = new javax.swing.JScrollPane();
        jListAvailable = new javax.swing.JList<>();
        jScrollPaneDisplayed = new javax.swing.JScrollPane();
        jListDisplayed = new javax.swing.JList<>();

        setMinimumSize(new java.awt.Dimension(400, 250));
        setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(jButtonAdd, gridBagConstraints);

        jLabelDisplayed.setText("Keywords displayed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        add(jLabelDisplayed, gridBagConstraints);

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        add(jButtonOk, gridBagConstraints);

        jLabelAvailable.setText("Available keywords");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(jLabelAvailable, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        add(jButtonCancel, gridBagConstraints);

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        add(jButtonRemove, gridBagConstraints);

        jLabelAvailableNb.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(jLabelAvailableNb, gridBagConstraints);

        jLabelDisplayedNb.setText("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        add(jLabelDisplayedNb, gridBagConstraints);

        jListAvailable.setToolTipText("");
        jScrollPaneAvailable.setViewportView(jListAvailable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        add(jScrollPaneAvailable, gridBagConstraints);

        jScrollPaneDisplayed.setViewportView(jListDisplayed);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        add(jScrollPaneDisplayed, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
       jListAvailable.getSelectedValuesList().forEach(columnDesc -> {
            modelDisplayed.addElement(columnDesc);
            modelAvailable.removeElement(columnDesc);
        });
        updateAvailableDisplayedLabels();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        jListDisplayed.getSelectedValuesList().forEach(columnDesc -> {
            modelAvailable.addElement(columnDesc);
            modelDisplayed.removeElement(columnDesc);
        });
        updateAvailableDisplayedLabels();
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        this.processOK = true;
        dialog.dispose();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        dialog.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    public List<ResultSetTableModel.ColumnDesc> getKeywordsToDisplay() {
        List<ResultSetTableModel.ColumnDesc> keywordsDisplayed = new ArrayList<> ();
        for (Enumeration<ResultSetTableModel.ColumnDesc> e = modelDisplayed.elements(); e.hasMoreElements();) {
            keywordsDisplayed.add(e.nextElement());
        }
        return keywordsDisplayed;
    }
    
    public boolean getProcessOK () { return processOK; }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JLabel jLabelAvailable;
    private javax.swing.JLabel jLabelAvailableNb;
    private javax.swing.JLabel jLabelDisplayed;
    private javax.swing.JLabel jLabelDisplayedNb;
    private javax.swing.JList<ResultSetTableModel.ColumnDesc> jListAvailable;
    private javax.swing.JList<ResultSetTableModel.ColumnDesc> jListDisplayed;
    private javax.swing.JScrollPane jScrollPaneAvailable;
    private javax.swing.JScrollPane jScrollPaneDisplayed;
    // End of variables declaration//GEN-END:variables

}

/** *****************************************************************************
 * JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
 ***************************************************************************** */
package fr.jmmc.oimaging.gui;


import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JList;

/**
 * Panel to be added in a dialog box to edit the display of the table
 *
 * @author martin
 */
public class TableEditorPanel extends javax.swing.JPanel {

    /** default serial UID for Serializable interface */
    private static final long serialVersionUID = 1;

    // Model and view for the list
    private final DefaultListModel<String> modelHidden = new DefaultListModel<>();
    private final DefaultListModel<String> modelAvailable = new DefaultListModel<>();

    // Reference to the parent dialog box to handle its events
    private final JDialog dialog;

    /** editor result = true if the user validates the inputs */
    private boolean result = false;

    /**
     * Constructor
     * @param dialog Reference to the parent dialog box to handle its events
     * @param hiddenColumns required
     * @param availableColumns required
     */
    public TableEditorPanel(JDialog dialog, List<String> hiddenColumns, List<String> availableColumns) {
        initComponents();
        this.dialog = dialog;

        hiddenColumns.forEach(modelHidden::addElement);
        availableColumns.forEach(modelAvailable::addElement);

        jListHidden.setModel(modelHidden);
        jListAvailable.setModel(modelAvailable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButtonAdd = new javax.swing.JButton();
        jLabelDisplayed = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jLabelHidden = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jScrollPaneHidden = new javax.swing.JScrollPane();
        jListHidden = new javax.swing.JList<>();
        jScrollPaneDisplayed = new javax.swing.JScrollPane();
        jListAvailable = new javax.swing.JList<>();
        jButtonReset = new javax.swing.JButton();
        jButtonUp = new javax.swing.JButton();
        jButtonDown = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(400, 250));
        setLayout(new java.awt.GridBagLayout());

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jButtonAdd, gridBagConstraints);

        jLabelDisplayed.setText("Displayed columns");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jLabelDisplayed, gridBagConstraints);

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jButtonOk, gridBagConstraints);

        jLabelHidden.setText("Hidden columns");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jLabelHidden, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jButtonCancel, gridBagConstraints);

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jButtonRemove, gridBagConstraints);

        jListHidden.setToolTipText("");
        jListHidden.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jListHiddenFocusGained(evt);
            }
        });
        jScrollPaneHidden.setViewportView(jListHidden);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(jScrollPaneHidden, gridBagConstraints);

        jListAvailable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jListAvailableFocusGained(evt);
            }
        });
        jScrollPaneDisplayed.setViewportView(jListAvailable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(jScrollPaneDisplayed, gridBagConstraints);

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jButtonReset, gridBagConstraints);

        jButtonUp.setText("Up");
        jButtonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jButtonUp, gridBagConstraints);

        jButtonDown.setText("Down");
        jButtonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jButtonDown, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        jListAvailable.getSelectedValuesList().forEach(column -> {
            modelHidden.addElement(column);
            modelAvailable.removeElement(column);
        });
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        this.result = true;
        dialog.dispose();
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        dialog.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        for (Enumeration<String> e = modelHidden.elements(); e.hasMoreElements();) {
            modelAvailable.addElement(e.nextElement());
        }
        modelHidden.clear();
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        jListHidden.getSelectedValuesList().forEach(column -> {
            modelAvailable.addElement(column);
            modelHidden.removeElement(column);
        });
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpActionPerformed

        // selecting the good list and model so we write one function for both list

        JList<String> jList =
                jListAvailable.getSelectedIndices().length > 0
                ? jListAvailable
                : jListHidden ;

        DefaultListModel<String> model =
                jListAvailable.getSelectedIndices().length > 0
                ? modelAvailable
                : modelHidden;

        int[] indexes = jList.getSelectedIndices();

        // - 1 so the index 0 cannot be moved up
        int lastIndex = -1;

        for (int i = 0; i < indexes.length; i ++) {
            int index = indexes[i];

            // we cannot move up if the last index is immediately above
            if (lastIndex < index - 1) {
                // we switch the values
                String a = model.getElementAt(index - 1);
                String b = model.getElementAt(index);
                model.setElementAt(b, index - 1);
                model.setElementAt(a, index);
                // we decrement the index
                index --;
                // also in the indexes table (to keep selection GUI correct)
                indexes[i] --;
            }

            lastIndex = index;
        }

        // we update the selection GUI because the values have moved but not the selection indexes
        jList.setSelectedIndices(indexes);
    }//GEN-LAST:event_jButtonUpActionPerformed

    private void jButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownActionPerformed

        // selecting the good list and model so we write one function for both list

        JList<String> jList =
                jListAvailable.getSelectedIndices().length > 0
                ? jListAvailable
                : jListHidden ;

        DefaultListModel<String> model =
                jListAvailable.getSelectedIndices().length > 0
                ? modelAvailable
                : modelHidden;

        int[] indexes = jList.getSelectedIndices();

        // size() so the index (size - 1) cannot be moved down
        int lastIndex = model.getSize();

        for (int i = indexes.length - 1; i >= 0; i --) {
            int index = indexes[i];

            // we cannot move down if the last index is immediately below
            if (lastIndex > index + 1) {
                // we switch the values
                String a = model.getElementAt(index);
                String b = model.getElementAt(index + 1);
                model.setElementAt(b, index);
                model.setElementAt(a, index + 1);
                // we increment the index
                index ++;
                // also in the indexes table (to keep selection GUI correct)
                indexes[i] ++;
            }

            lastIndex = index;
        }

        // we update the selection GUI because the values have moved but not the selection indexes
        jList.setSelectedIndices(indexes);
    }//GEN-LAST:event_jButtonDownActionPerformed

    private void jListHiddenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jListHiddenFocusGained
        jListAvailable.clearSelection();
    }//GEN-LAST:event_jListHiddenFocusGained

    private void jListAvailableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jListAvailableFocusGained
        jListHidden.clearSelection();
    }//GEN-LAST:event_jListAvailableFocusGained

    public List<String> getAvailableColumns() {
        List<String> availableColumns = new ArrayList<>(modelAvailable.getSize());
        for (Enumeration<String> e = modelAvailable.elements(); e.hasMoreElements();) {
            availableColumns.add(e.nextElement());
        }
        return availableColumns;
    }

    /**
     * Return the editor result
     * @return true if the user validated (ok button)
     */
    public boolean isResult() {
        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDown;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonUp;
    private javax.swing.JLabel jLabelDisplayed;
    private javax.swing.JLabel jLabelHidden;
    private javax.swing.JList<String> jListAvailable;
    private javax.swing.JList<String> jListHidden;
    private javax.swing.JScrollPane jScrollPaneDisplayed;
    private javax.swing.JScrollPane jScrollPaneHidden;
    // End of variables declaration//GEN-END:variables

}
